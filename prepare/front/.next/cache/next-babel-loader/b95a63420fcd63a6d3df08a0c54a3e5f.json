{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: 1,\n    content: data.content,\n    User: {\n      id: 2,\n      nickname: '사용자2'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addPostSuccessAction = function addPostSuccessAction(data) {\n  return {\n    type: ADD_POST_SUCCESS,\n    data: data\n  };\n};\nexport var addPostFailureAction = function addPostFailureAction(data) {\n  return {\n    type: ADD_POST_FAILURE\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.err;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","addPostLoading","addPostDone","addPostError","dummyPost","data","id","content","User","nickname","Images","Comments","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPostRequestAction","type","addPostSuccessAction","addPostFailureAction","reducer","state","action","draft","unshift","err"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAC,EADc;AAExBC,EAAAA,cAAc,EAAG,KAFO;AAGxBC,EAAAA,WAAW,EAAE,KAHW;AAIxBC,EAAAA,YAAY,EAAE;AAJU,CAArB;;AAQP,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;AAAA,SAAW;AACzBC,IAAAA,EAAE,EAAE,CADqB;AAEzBC,IAAAA,OAAO,EAAEF,IAAI,CAACE,OAFW;AAGzBC,IAAAA,IAAI,EAAC;AACDF,MAAAA,EAAE,EAAC,CADF;AAEDG,MAAAA,QAAQ,EAAC;AAFR,KAHoB;AAOzBC,IAAAA,MAAM,EAAE,EAPiB;AAQzBC,IAAAA,QAAQ,EAAE;AARe,GAAX;AAAA,CAAlB;;AAWA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACV,IAAD;AAAA,SAAW;AAC3CW,IAAAA,IAAI,EAAEJ,gBADqC;AAE3CP,IAAAA,IAAI,EAAJA;AAF2C,GAAX;AAAA,CAA7B;AAIP,OAAO,IAAMY,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACZ,IAAD;AAAA,SAAW;AAC3CW,IAAAA,IAAI,EAAEH,gBADqC;AAE3CR,IAAAA,IAAI,EAAJA;AAF2C,GAAX;AAAA,CAA7B;AAIP,OAAO,IAAMa,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACb,IAAD;AAAA,SAAW;AAC3CW,IAAAA,IAAI,EAAEF;AADqC,GAAX;AAAA,CAA7B;;AAGP,IAAMK,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAxBrB,YAAwB;AAAA,MAAVsB,MAAU;AAC9C,SAAOvB,OAAO,CAACsB,KAAD,EAAO,UAACE,KAAD,EAAW;AAC5B,YAAQD,MAAM,CAACL,IAAf;AACI,WAAKJ,gBAAL;AACIU,QAAAA,KAAK,CAACrB,cAAN,GAAuB,IAAvB;AACAqB,QAAAA,KAAK,CAACpB,WAAN,GAAoB,KAApB;AACAoB,QAAAA,KAAK,CAACnB,YAAN,GAAqB,IAArB;AACA;;AACJ,WAAKU,gBAAL;AACIS,QAAAA,KAAK,CAACrB,cAAN,GAAuB,KAAvB;AACAqB,QAAAA,KAAK,CAACpB,WAAN,GAAoB,IAApB;AACAoB,QAAAA,KAAK,CAACtB,SAAN,CAAgBuB,OAAhB,CAAwBnB,SAAS,CAACiB,MAAM,CAAChB,IAAR,CAAjC;AACA;;AACJ,WAAKS,gBAAL;AACIQ,QAAAA,KAAK,CAACrB,cAAN,GAAuB,KAAvB;AACAqB,QAAAA,KAAK,CAACpB,WAAN,GAAoB,KAApB;AACAoB,QAAAA,KAAK,CAACnB,YAAN,GAAqBkB,MAAM,CAACG,GAA5B;AACA;;AACJ;AACI;AAjBR;AAmBH,GApBa,CAAd;AAqBH,CAtBD;;AAwBA,eAAeL,OAAf","sourcesContent":["import produce from 'immer'\r\n\r\nexport const initialState = {\r\n    mainPosts:[],\r\n    addPostLoading : false,\r\n    addPostDone: false,\r\n    addPostError: null\r\n\r\n}\r\n\r\nconst dummyPost = (data) => ({\r\n    id: 1,\r\n    content: data.content,\r\n    User:{\r\n        id:2,\r\n        nickname:'사용자2'\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n})\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\nexport const addPostSuccessAction = (data) => ({\r\n    type: ADD_POST_SUCCESS,\r\n    data\r\n})\r\nexport const addPostFailureAction = (data) => ({\r\n    type: ADD_POST_FAILURE,\r\n})\r\nconst reducer = (state =  initialState, action) =>{\r\n    return produce(state,(draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.err;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n}\r\n\r\nexport default reducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}