{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nimport shortId from 'shortid';\n\nfunction addPostApi() {\n  return axios.get('api/addpost', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addCommentApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction addComment(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","all","fork","put","takeLatest","delay","axios","ADD_COMMENT_REQUEST","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","shortId","addPostApi","get","data","action","id","generate","type","content","response","addCommentApi"],"mappings":";;oDAUUA,O;qDAuBAC,U;qDAmBAC,Y;qDAGAC,e;qDAIeC,Q;;AA3DzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,gBAAhD,EAAkEC,gBAAlE,QAA0F,kBAA1F;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAIA,SAASC,UAAT,GAAsB;AAClB,SAAON,KAAK,CAACO,GAAN,CAAU,aAAV,EAAwBC,IAAxB,CAAP;AACH;;AACD,SAAUlB,OAAV,CAAmBmB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMV,KAAK,CAAC,IAAD,CAAX;;AAFR;AAGcW,UAAAA,EAHd,GAGmBL,OAAO,CAACM,QAAR,EAHnB;AAAA;AAIQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAER,gBADA;AAENI,YAAAA,IAAI,EAAC;AACDE,cAAAA,EAAE,EAAFA,EADC;AAEDG,cAAAA,OAAO,EAAEJ,MAAM,CAACD;AAFf;AAFC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaQ,iBAAMX,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACV,gBADC;AAENM,YAAAA,IAAI,EAAE,YAAIM,QAAJ,CAAaN;AAFb,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASO,aAAT,GAAyB;AACrB,SAAOf,KAAK,CAACO,GAAN,CAAU,gBAAV,EAA2BC,IAA3B,CAAP;AACH;;AACD,SAAUjB,UAAV,CAAsBkB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMV,KAAK,CAAC,IAAD,CAAX;;AAFR;AAGcW,UAAAA,EAHd,GAGmBL,OAAO,CAACM,QAAR,EAHnB;AAAA;AAIQ,iBAAMd,GAAG,CAAC;AACNe,YAAAA,IAAI,EAAER,gBADA;AAENI,YAAAA,IAAI,EAAC;AACDE,cAAAA,EAAE,EAAFA,EADC;AAEDG,cAAAA,OAAO,EAAEJ,MAAM,CAACD;AAFf;AAFC,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaQ,iBAAMX,GAAG,CAAC;AACNe,YAAAA,IAAI,EAACV,gBADC;AAENM,YAAAA,IAAI,EAAE,aAAIM,QAAJ,CAAaN;AAFb,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACK,gBAAD,EAAmBb,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACG,mBAAD,EAAsBV,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACJ,YAAD,CADE,EAENI,IAAI,CAACH,eAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork, put, takeLatest, delay } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport { ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\r\nimport shortId from 'shortid'\r\n\r\n\r\n\r\nfunction addPostApi() {\r\n    return axios.get('api/addpost',data)\r\n}\r\nfunction* addPost (action){\r\n    try{\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* addComment (action){\r\n    try{\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}