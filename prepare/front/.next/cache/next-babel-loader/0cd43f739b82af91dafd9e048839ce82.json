{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nexport const initialState = {\n  logInLoading: false,\n  logInDone: false,\n  logInError: null,\n  me: null\n};\n\nconst dummyUser = data => _objectSpread(_objectSpread({}, data), {}, {\n  nickname: '닉네임',\n  id: 1,\n  Posts: [{\n    id: 1\n  }],\n  Followings: [{\n    nickname: '부기'\n  }, {\n    nickname: '부기2'\n  }, {\n    nickname: '부기3'\n  }],\n  Followers: [{\n    nickname: 'king'\n  }]\n});\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const loginRequestAction = data => ({\n  type: LOG_IN_REQUEST,\n  data\n});\nexport const loginSuccessAction = data => ({\n  type: LOG_IN_SUCCESS,\n  data\n});\nexport const loginFailureAction = data => ({\n  type: LOG_IN_FAILURE,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        draft.logInLoading = true;\n        draft.logInError = null;\n        draft.logInDone = false;\n        break;\n\n      case LOG_IN_SUCCESS:\n        draft.logInLoading = false;\n        draft.logInDone = true;\n        draft.me = dummyUser(action.data);\n        break;\n\n      case LOG_IN_FAILURE:\n        draft.logInLoading = false;\n        draft.logInError = action.error;\n        break;\n\n      case LOG_OUT_REQUEST:\n        draft.logInLoading = true;\n        draft.logInError = null;\n        draft.logInDone = false;\n        break;\n\n      case LOG_OUT_SUCCESS:\n        draft.logInLoading = false;\n        draft.logInDone = true;\n        draft.me = dummyUser(action.data);\n        break;\n\n      case LOG_IN_FAILURE:\n        draft.logInLoading = false;\n        draft.logInError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/reducers/user.js"],"names":["produce","initialState","logInLoading","logInDone","logInError","me","dummyUser","data","nickname","id","Posts","Followings","Followers","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","loginRequestAction","type","loginSuccessAction","loginFailureAction","reducer","state","action","draft","error"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,YAAY,EAAG,KADS;AAExBC,EAAAA,SAAS,EAAE,KAFa;AAGxBC,EAAAA,UAAU,EAAE,IAHY;AAIxBC,EAAAA,EAAE,EAAE;AAJoB,CAArB;;AAMP,MAAMC,SAAS,GAAIC,IAAD,oCACXA,IADW;AAEdC,EAAAA,QAAQ,EAAC,KAFK;AAGdC,EAAAA,EAAE,EAAC,CAHW;AAIdC,EAAAA,KAAK,EAAC,CAAC;AAACD,IAAAA,EAAE,EAAE;AAAL,GAAD,CAJQ;AAKdE,EAAAA,UAAU,EAAC,CAAC;AAACH,IAAAA,QAAQ,EAAC;AAAV,GAAD,EAAiB;AAACA,IAAAA,QAAQ,EAAC;AAAV,GAAjB,EAAkC;AAACA,IAAAA,QAAQ,EAAC;AAAV,GAAlC,CALG;AAMdI,EAAAA,SAAS,EAAC,CAAC;AAACJ,IAAAA,QAAQ,EAAE;AAAX,GAAD;AANI,EAAlB;;AASA,OAAO,MAAMK,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,kBAAkB,GAAIZ,IAAD,KAAW;AACzCa,EAAAA,IAAI,EAAEP,cADmC;AAEzCN,EAAAA;AAFyC,CAAX,CAA3B;AAIP,OAAO,MAAMc,kBAAkB,GAAId,IAAD,KAAW;AACzCa,EAAAA,IAAI,EAAEN,cADmC;AAEzCP,EAAAA;AAFyC,CAAX,CAA3B;AAIP,OAAO,MAAMe,kBAAkB,GAAIf,IAAD,KAAW;AACzCa,EAAAA,IAAI,EAAEL,cADmC;AAEzCR,EAAAA;AAFyC,CAAX,CAA3B;;AAKP,MAAMgB,OAAO,GAAG,CAACC,KAAK,GAAGvB,YAAT,EAAuBwB,MAAvB,KAAkC;AAChD,SAAOzB,OAAO,CAACwB,KAAD,EAASE,KAAD,IAAW;AAC3B,YAAOD,MAAM,CAACL,IAAd;AACI,WAAKP,cAAL;AACAa,QAAAA,KAAK,CAACxB,YAAN,GAAqB,IAArB;AACAwB,QAAAA,KAAK,CAACtB,UAAN,GAAmB,IAAnB;AACAsB,QAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACA;;AAEA,WAAKW,cAAL;AACAY,QAAAA,KAAK,CAACxB,YAAN,GAAqB,KAArB;AACAwB,QAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACAuB,QAAAA,KAAK,CAACrB,EAAN,GAAWC,SAAS,CAACmB,MAAM,CAAClB,IAAR,CAApB;AACA;;AAEA,WAAKQ,cAAL;AACAW,QAAAA,KAAK,CAACxB,YAAN,GAAqB,KAArB;AACAwB,QAAAA,KAAK,CAACtB,UAAN,GAAmBqB,MAAM,CAACE,KAA1B;AACA;;AAEA,WAAKX,eAAL;AACAU,QAAAA,KAAK,CAACxB,YAAN,GAAqB,IAArB;AACAwB,QAAAA,KAAK,CAACtB,UAAN,GAAmB,IAAnB;AACAsB,QAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACA;;AAEA,WAAKc,eAAL;AACAS,QAAAA,KAAK,CAACxB,YAAN,GAAqB,KAArB;AACAwB,QAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACAuB,QAAAA,KAAK,CAACrB,EAAN,GAAWC,SAAS,CAACmB,MAAM,CAAClB,IAAR,CAApB;AACA;;AAEA,WAAKQ,cAAL;AACAW,QAAAA,KAAK,CAACxB,YAAN,GAAqB,KAArB;AACAwB,QAAAA,KAAK,CAACtB,UAAN,GAAmBqB,MAAM,CAACE,KAA1B;AACA;;AAEA;AAAS;AAnCb;AAsCH,GAvCW,CAAd;AAwCD,CAzCD;;AA0CA,eAAeJ,OAAf","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n    logInLoading : false,\r\n    logInDone: false,\r\n    logInError: null,\r\n    me: null,\r\n}\r\nconst dummyUser = (data) => ({\r\n    ...data,\r\n    nickname:'닉네임',\r\n    id:1,\r\n    Posts:[{id: 1}],\r\n    Followings:[{nickname:'부기'},{nickname:'부기2'},{nickname:'부기3'}],\r\n    Followers:[{nickname: 'king'}]\r\n\r\n})\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\nexport const loginRequestAction = (data) => ({\r\n    type: LOG_IN_REQUEST,\r\n    data,\r\n})\r\nexport const loginSuccessAction = (data) => ({\r\n    type: LOG_IN_SUCCESS,\r\n    data,\r\n}) \r\nexport const loginFailureAction = (data) => ({\r\n    type: LOG_IN_FAILURE,\r\n    data,\r\n}) \r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n        switch(action.type) {\r\n            case LOG_IN_REQUEST:\r\n            draft.logInLoading = true;\r\n            draft.logInError = null;\r\n            draft.logInDone = false;\r\n            break;\r\n\r\n            case LOG_IN_SUCCESS:\r\n            draft.logInLoading = false;\r\n            draft.logInDone = true;\r\n            draft.me = dummyUser(action.data);\r\n            break;\r\n            \r\n            case LOG_IN_FAILURE:\r\n            draft.logInLoading = false;\r\n            draft.logInError = action.error;\r\n            break;\r\n\r\n            case LOG_OUT_REQUEST:\r\n            draft.logInLoading = true;\r\n            draft.logInError = null;\r\n            draft.logInDone = false;\r\n            break;\r\n\r\n            case LOG_OUT_SUCCESS:\r\n            draft.logInLoading = false;\r\n            draft.logInDone = true;\r\n            draft.me = dummyUser(action.data);\r\n            break;\r\n            \r\n            case LOG_IN_FAILURE:\r\n            draft.logInLoading = false;\r\n            draft.logInError = action.error;\r\n            break;\r\n\r\n            default: break;\r\n\r\n        }\r\n    })\r\n} \r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}