{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport shortId from 'shortid';\n\nfunction addPostApi() {\n  return axios.get('api/addpost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","shortId","addPostApi","get","data","addPost","action","id","generate","type","content","err","response","removePostApi","removePost","addCommentApi","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,EAAwEC,gBAAxE,EAA0FC,gBAA1F,EAA4GC,gBAA5G,EAA8HC,mBAA9H,EAAmJC,mBAAnJ,QAA8K,kBAA9K;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAIA,SAASC,UAAT,GAAsB;AAClB,SAAOV,KAAK,CAACW,GAAN,CAAU,aAAV,EAAwBC,IAAxB,CAAP;AACH;;AACD,UAAUC,OAAV,CAAmBC,MAAnB,EAA0B;AACtB,MAAG;AACC,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMgB,EAAE,GAAGN,OAAO,CAACO,QAAR,EAAX;AACA,UAAMnB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEX,gBADA;AAENM,MAAAA,IAAI,EAAC;AACDG,QAAAA,EADC;AAEDG,QAAAA,OAAO,EAAEJ,MAAM,CAACF;AAFf;AAFC,KAAD,CAAT;AAQH,GAXD,CAWC,OAAMO,GAAN,EAAU;AACP,UAAMtB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACb,gBADC;AAENQ,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,aAAT,GAAyB;AACrB,SAAOrB,KAAK,CAACW,GAAN,CAAU,gBAAV,EAA2BC,IAA3B,CAAP;AACH;;AACD,UAAUU,UAAV,CAAsBR,MAAtB,EAA6B;AACzB,MAAG;AACC,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAET,mBADA;AAENI,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMO,GAAN,EAAU;AACP,UAAMtB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAChB,mBADC;AAENW,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASW,aAAT,GAAyB;AACrB,SAAOvB,KAAK,CAACW,GAAN,CAAU,gBAAV,EAA2BC,IAA3B,CAAP;AACH;;AACD,UAAUY,UAAV,CAAsBV,MAAtB,EAA6B;AACzB,MAAG;AACC,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEd,mBADA;AAENS,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMO,GAAN,EAAU;AACP,UAAMtB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAChB,mBADC;AAENW,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUa,YAAV,GAAyB;AACvB,QAAM3B,UAAU,CAACO,gBAAD,EAAmBQ,OAAnB,CAAhB;AACD;;AACD,UAAUa,eAAV,GAA4B;AAC1B,QAAM5B,UAAU,CAACS,mBAAD,EAAsBe,UAAtB,CAAhB;AACD;;AACD,UAAUK,eAAV,GAA4B;AAC1B,QAAM7B,UAAU,CAACI,mBAAD,EAAsBsB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAAC6B,YAAD,CADE,EAEN7B,IAAI,CAAC8B,eAAD,CAFE,EAGN9B,IAAI,CAAC+B,eAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all, fork, put, takeLatest, delay } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\r\nimport shortId from 'shortid'\r\n\r\n\r\n\r\nfunction addPostApi() {\r\n    return axios.get('api/addpost',data)\r\n}\r\nfunction* addPost (action){\r\n    try{\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* removePost (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction addCommentApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* addComment (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}