{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmleh\\\\Desktop\\\\react-nodebird-self\\\\prepare\\\\front\\\\components\\\\CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { addComment, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user.me;\n  }),\n      id = _useSelector.id;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user.me;\n  }),\n      nickname = _useSelector2.nickname;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      OnChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector3.addCommentDone;\n\n  useEffect(function () {\n    if (addCommentDone) setCommentText('');\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n    dispatch(addComment({\n      content: commentText,\n      postId: post.id,\n      userNickname: nickname\n    }));\n  }, [commentText]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmitComment,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        style: {\n          position: 'relative'\n        },\n        controlId: \"exampleForm.ControlTextarea1\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          srOnly: true,\n          children: \"Example textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          rows: 3,\n          value: commentText,\n          onChange: OnChangeCommentText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          position: 'absolute',\n          right: 0\n        },\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"\\uAC8C\\uC2DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false);\n};\n\n_s(CommentForm, \"tz7Ls3mC6c2F4yBu4IzP5AlHF4I=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useInput, useSelector];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","useState","Form","Button","PropTypes","useDispatch","useSelector","useInput","addComment","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","CommentForm","post","state","user","me","id","nickname","dispatch","commentText","OnChangeCommentText","setCommentText","addCommentDone","onSubmitComment","e","preventDefault","content","postId","userNickname","position","right","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React,{useCallback, useEffect, useState} from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useInput from '../hooks/useInput'\r\nimport {addComment, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS} from '../reducers/post'\r\nconst CommentForm = ({post}) => {\r\n    const {id} = useSelector(state => state.user.me);\r\n    const {nickname} = useSelector(state => state.user.me);\r\n    const dispatch = useDispatch();\r\n    const [commentText, OnChangeCommentText,setCommentText] = useInput('')\r\n    const {addCommentDone} = useSelector(state => state.post)\r\n    useEffect(() => {\r\n        if(addCommentDone)\r\n        setCommentText('')\r\n    }, [addCommentDone])\r\n    const onSubmitComment = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            dispatch(addComment({\r\n                content: commentText,\r\n                postId: post.id,\r\n                userNickname: nickname,\r\n            }))\r\n        },\r\n        [commentText],\r\n    )\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmitComment}>\r\n                <Form.Group style={{position:'relative'}} controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label srOnly>Example textarea</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} value={commentText} onChange={OnChangeCommentText}/>\r\n                </Form.Group>\r\n                <Button style={{position:'absolute', right:0,}} variant=\"primary\" type=\"submit\">\r\n                게시\r\n                </Button>\r\n            </Form>\r\n            \r\n        </>\r\n    )\r\n}\r\nCommentForm.propTypes = {\r\n    post: PropTypes.object.isRequired,\r\n}\r\nexport default CommentForm\r\n"]},"metadata":{},"sourceType":"module"}