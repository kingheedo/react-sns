{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(wathLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS } from '../reducers/user';\n\nfunction logInApi(data) {\n  return axios.get('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction wathLogIn() {\n  return _regeneratorRuntime.wrap(function wathLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(wathLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/sagas/user.js"],"names":["logIn","wathLogIn","userSaga","all","fork","put","takeLatest","delay","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","logInApi","data","get","action","type","error","response"],"mappings":";;oDAOUA,K;qDAgBAC,S;qDAIeC,Q;;AA3BzB,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,QAA+D,kBAA/D;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOL,KAAK,CAACM,GAAN,CAAU,YAAV,EAAuBD,IAAvB,CAAP;AACH;;AACD,SAAUb,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMF,GAAG,CAAC;AACNW,YAAAA,IAAI,EAAEL,cADA;AAENE,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMR,GAAG,CAAE;AACPW,YAAAA,IAAI,EAAEP,cADC;AAEPQ,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaL;AAFb,WAAF,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUZ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACI,cAAD,EAAiBV,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,SAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, fork, put, takeLatest, delay } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS } from '../reducers/user';\r\n\r\nfunction logInApi(data){\r\n    return axios.get('/api/login',data);\r\n}\r\nfunction* logIn(action) {\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        })\r\n\r\n    }catch(err){\r\n        yield put ({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* wathLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(wathLogIn),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}