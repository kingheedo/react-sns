{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport shortId from 'shortid';\nimport { REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostApi() {\n  return axios.get('api/loadPost', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostApi() {\n  return axios.get('api/addpost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","shortId","REMOVE_POST_OF_ME","loadPostApi","get","data","loadPost","action","type","generateDummyPost","err","response","addPostApi","addPost","id","generate","content","removePostApi","removePost","addCommentApi","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,EAAoCC,KAApC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,EAAwEC,gBAAxE,EAA0FC,gBAA1F,EAA4GC,gBAA5G,EAA8HC,kBAA9H,EAAkJC,kBAAlJ,EAAsKC,kBAAtK,EAA0LC,mBAA1L,EAA+MC,mBAA/M,EAAoOC,mBAApO,QAA+P,kBAA/P;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAIA,SAASC,WAAT,GAAuB;AACnB,SAAOf,KAAK,CAACgB,GAAN,CAAU,cAAV,EAAyBC,IAAzB,CAAP;AACH;;AACD,UAAUC,QAAV,CAAoBC,MAApB,EAA2B;AACvB,MAAG;AACC,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEX,kBADA;AAENQ,MAAAA,IAAI,EAAEI;AAFA,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMC,GAAN,EAAU;AACP,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAACb,kBADC;AAENU,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASO,UAAT,GAAsB;AAClB,SAAOxB,KAAK,CAACgB,GAAN,CAAU,aAAV,EAAwBC,IAAxB,CAAP;AACH;;AACD,UAAUQ,OAAV,CAAmBN,MAAnB,EAA0B;AACtB,MAAG;AACC,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM2B,EAAE,GAAGb,OAAO,CAACc,QAAR,EAAX;AACA,UAAM9B,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEd,gBADA;AAENW,MAAAA,IAAI,EAAC;AACDS,QAAAA,EADC;AAEDE,QAAAA,OAAO,EAAET,MAAM,CAACF;AAFf;AAFC,KAAD,CAAT;AAQH,GAXD,CAWC,OAAMK,GAAN,EAAU;AACP,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAChB,gBADC;AAENa,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASY,aAAT,GAAyB;AACrB,SAAO7B,KAAK,CAACgB,GAAN,CAAU,gBAAV,EAA2BC,IAA3B,CAAP;AACH;;AACD,UAAUa,UAAV,CAAsBX,MAAtB,EAA6B;AACzB,MAAG;AACC,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAER,mBADA;AAENK,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAIA,UAAMpB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEN,iBADA;AAENG,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAKH,GAXD,CAWC,OAAMK,GAAN,EAAU;AACP,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAACV,mBADC;AAENO,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,SAASc,aAAT,GAAyB;AACrB,SAAO/B,KAAK,CAACgB,GAAN,CAAU,gBAAV,EAA2BC,IAA3B,CAAP;AACH;;AACD,UAAUe,UAAV,CAAsBb,MAAtB,EAA6B;AACzB,MAAG;AACC,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAAEjB,mBADA;AAENc,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,KAAD,CAAT;AAKH,GAPD,CAOC,OAAMK,GAAN,EAAU;AACP,UAAMzB,GAAG,CAAC;AACNuB,MAAAA,IAAI,EAACnB,mBADC;AAENgB,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUgB,aAAV,GAA0B;AACxB,QAAMnC,UAAU,CAACU,kBAAD,EAAqBU,QAArB,CAAhB;AACD;;AACD,UAAUgB,YAAV,GAAyB;AACvB,QAAMpC,UAAU,CAACO,gBAAD,EAAmBoB,OAAnB,CAAhB;AACD;;AACD,UAAUU,eAAV,GAA4B;AAC1B,QAAMrC,UAAU,CAACa,mBAAD,EAAsBmB,UAAtB,CAAhB;AACD;;AACD,UAAUM,eAAV,GAA4B;AAC1B,QAAMtC,UAAU,CAACI,mBAAD,EAAsB8B,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAoB;AAC/B,QAAM1C,GAAG,CAAC,CACNC,IAAI,CAACsC,YAAD,CADE,EAENtC,IAAI,CAACuC,eAAD,CAFE,EAGNvC,IAAI,CAACwC,eAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all, fork, put, takeLatest, delay } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\r\nimport shortId from 'shortid'\r\nimport { REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n\r\nfunction loadPostApi() {\r\n    return axios.get('api/loadPost',data)\r\n}\r\nfunction* loadPost (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction addPostApi() {\r\n    return axios.get('api/addpost',data)\r\n}\r\nfunction* addPost (action){\r\n    try{\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* removePost (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction addCommentApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* addComment (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}