{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nimport shortId from 'shortid';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  content: faker.lorem.paragraph(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph()\n  }]\n}));\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '사용자2'\n  },\n  Images: [{\n    src: \"https://cdn.pixabay.com/photo/2021/01/24/20/47/mountains-5946500_1280.jpg\"\n  }],\n  Comments: ['댓글테스트']\n});\n\nconst dummyComment = data => _objectSpread({\n  id: shortId.generate()\n}, data);\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addPostSuccessAction = data => ({\n  type: ADD_POST_SUCCESS,\n  data\n});\nexport const addPostFailureAction = data => ({\n  type: ADD_POST_FAILURE\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.err;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.err;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.err;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.err;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/reducers/post.js"],"names":["produce","shortId","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","content","lorem","paragraph","User","nickname","name","findName","Images","src","image","Comments","dummyPost","data","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPostRequestAction","type","addPostSuccessAction","addPostFailureAction","addComment","reducer","state","action","draft","unshift","err","concat","length","post","find","v","postId","filter"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAC,EADc;AAExBC,EAAAA,UAAU,EAAC,EAFa;AAGxBC,EAAAA,YAAY,EAAE,IAHU;AAIxBC,EAAAA,eAAe,EAAG,KAJM;AAKxBC,EAAAA,YAAY,EAAE,KALU;AAMxBC,EAAAA,aAAa,EAAE,IANS;AAOxBC,EAAAA,cAAc,EAAG,KAPO;AAQxBC,EAAAA,WAAW,EAAE,KARW;AASxBC,EAAAA,YAAY,EAAE,IATU;AAUxBC,EAAAA,iBAAiB,EAAG,KAVI;AAWxBC,EAAAA,cAAc,EAAE,KAXQ;AAYxBC,EAAAA,eAAe,EAAE,IAZO;AAaxBC,EAAAA,iBAAiB,EAAG,KAbI;AAcxBC,EAAAA,cAAc,EAAE,KAdQ;AAexBC,EAAAA,eAAe,EAAE;AAfO,CAArB;AAmBP,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IACjCC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,OAAO;AAC5BC,EAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADwB;AAE5BC,EAAAA,OAAO,EAAExB,KAAK,CAACyB,KAAN,CAAYC,SAAZ,EAFmB;AAG5BC,EAAAA,IAAI,EAAE;AACFL,IAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADF;AAEFK,IAAAA,QAAQ,EAAE5B,KAAK,CAAC6B,IAAN,CAAWC,QAAX;AAFR,GAHsB;AAO5BC,EAAAA,MAAM,EAAE,CAAC;AACLC,IAAAA,GAAG,EAAEhC,KAAK,CAACiC,KAAN,CAAYA,KAAZ;AADA,GAAD,CAPoB;AAU5BC,EAAAA,QAAQ,EAAC,CAAC;AACNZ,IAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADE;AAENI,IAAAA,IAAI,EAAE;AACFL,MAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADF;AAEFK,MAAAA,QAAQ,EAAE5B,KAAK,CAAC6B,IAAN,CAAWC,QAAX;AAFR,KAFA;AAMNN,IAAAA,OAAO,EAAExB,KAAK,CAACyB,KAAN,CAAYC,SAAZ;AANH,GAAD;AAVmB,CAAP,CAAzB,CADO;;AAqBP,MAAMS,SAAS,GAAIC,IAAD,KAAW;AACzBd,EAAAA,EAAE,EAAEc,IAAI,CAACd,EADgB;AAEzBE,EAAAA,OAAO,EAAEY,IAAI,CAACZ,OAFW;AAGzBG,EAAAA,IAAI,EAAC;AACDL,IAAAA,EAAE,EAAC,CADF;AAEDM,IAAAA,QAAQ,EAAC;AAFR,GAHoB;AAOzBG,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,GAAG,EAAC;AAAL,GAAD,CAPiB;AAQzBE,EAAAA,QAAQ,EAAE,CAAC,OAAD;AARe,CAAX,CAAlB;;AAUA,MAAMG,YAAY,GAAID,IAAD;AACjBd,EAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR;AADa,GAEda,IAFc,CAArB;;AAKA,OAAO,MAAME,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,oBAAoB,GAAId,IAAD,KAAW;AAC3Ce,EAAAA,IAAI,EAAEb,gBADqC;AAE3CF,EAAAA;AAF2C,CAAX,CAA7B;AAIP,OAAO,MAAMgB,oBAAoB,GAAIhB,IAAD,KAAW;AAC3Ce,EAAAA,IAAI,EAAEZ,gBADqC;AAE3CH,EAAAA;AAF2C,CAAX,CAA7B;AAIP,OAAO,MAAMiB,oBAAoB,GAAIjB,IAAD,KAAW;AAC3Ce,EAAAA,IAAI,EAAEX;AADqC,CAAX,CAA7B;AAIP,OAAO,MAAMc,UAAU,GAAIlB,IAAD,KAAW;AACjCe,EAAAA,IAAI,EAAEP,mBAD2B;AAEjCR,EAAAA;AAFiC,CAAX,CAAnB;;AAQP,MAAMmB,OAAO,GAAG,CAACC,KAAK,GAAIvD,YAAV,EAAwBwD,MAAxB,KAAkC;AAC9C,SAAO3D,OAAO,CAAC0D,KAAD,EAAQE,KAAD,IAAW;AAC5B,YAAQD,MAAM,CAACN,IAAf;AACI,WAAKb,gBAAL;AACIoB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,IAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,KAApB;AACAiD,QAAAA,KAAK,CAAChD,YAAN,GAAqB,IAArB;AACA;;AACJ,WAAK6B,gBAAL;AACImB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,IAApB;AACAiD,QAAAA,KAAK,CAACxD,SAAN,CAAgByD,OAAhB,CAAwBxB,SAAS,CAACsB,MAAM,CAACrB,IAAR,CAAjC;AACA;;AACJ,WAAKI,gBAAL;AACIkB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,KAApB;AACAiD,QAAAA,KAAK,CAAChD,YAAN,GAAqB+C,MAAM,CAACG,GAA5B;AACA;;AACJ,WAAKnB,kBAAL;AACIiB,QAAAA,KAAK,CAACrD,eAAN,GAAwB,IAAxB;AACAqD,QAAAA,KAAK,CAACpD,YAAN,GAAqB,KAArB;AACAoD,QAAAA,KAAK,CAACnD,aAAN,GAAsB,IAAtB;AACA;;AACJ,WAAKmC,kBAAL;AACIgB,QAAAA,KAAK,CAACrD,eAAN,GAAwB,KAAxB;AACAqD,QAAAA,KAAK,CAACpD,YAAN,GAAqB,IAArB;AACAoD,QAAAA,KAAK,CAACxD,SAAN,GAAkBuD,MAAM,CAACrB,IAAP,CAAYyB,MAAZ,CAAmBH,KAAK,CAACxD,SAAzB,CAAlB;AACAwD,QAAAA,KAAK,CAACtD,YAAN,GAAqBsD,KAAK,CAACxD,SAAN,CAAgB4D,MAAhB,GAAyB,EAA9C;AACA;;AACJ,WAAKnB,kBAAL;AACIe,QAAAA,KAAK,CAACrD,eAAN,GAAwB,KAAxB;AACAqD,QAAAA,KAAK,CAACnD,aAAN,GAAsBkD,MAAM,CAACG,GAA7B;AACA;;AACJ,WAAKhB,mBAAL;AACIc,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,IAA1B;AACA+C,QAAAA,KAAK,CAAC9C,cAAN,GAAuB,KAAvB;AACA8C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKgC,mBAAL;AAAyB;AACrB,gBAAMkB,IAAI,GAAGL,KAAK,CAACxD,SAAN,CAAgB8D,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAAC3C,EAAF,KAASmC,MAAM,CAACrB,IAAP,CAAY8B,MAAjD,CAAb;AACAH,UAAAA,IAAI,CAAC7B,QAAL,CAAcyB,OAAd,CAAsBtB,YAAY,CAACoB,MAAM,CAACrB,IAAR,CAAlC;AACAsB,UAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,UAAAA,KAAK,CAAC9C,cAAN,GAAuB,IAAvB;AACA;AACC;;AACL,WAAKkC,mBAAL;AACIY,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB4C,MAAM,CAACG,GAA/B;AACA;;AAEA,WAAKb,mBAAL;AACAW,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,IAA1B;AACA4C,QAAAA,KAAK,CAAC3C,cAAN,GAAuB,KAAvB;AACA2C,QAAAA,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKgC,mBAAL;AACIU,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC3C,cAAN,GAAuB,IAAvB;AACA2C,QAAAA,KAAK,CAACxD,SAAN,GAAkBwD,KAAK,CAACxD,SAAN,CAAgBiE,MAAhB,CAAwBF,CAAD,IAAOA,CAAC,CAAC3C,EAAF,KAASmC,MAAM,CAACrB,IAA9C,CAAlB;AACA;;AACJ,WAAKa,mBAAL;AACIS,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC1C,eAAN,GAAwByC,MAAM,CAACG,GAA/B;AACA;;AACJ;AACI;AA/DR;AAiEH,GAlEa,CAAd;AAmEH,CApED;;AAsEA,eAAeL,OAAf","sourcesContent":["import produce from 'immer'\r\nimport shortId from 'shortid'\r\nimport faker from 'faker'\r\n\r\nexport const initialState = {\r\n    mainPosts:[],\r\n    imagePaths:[],\r\n    hasMorePosts: true,\r\n    loadPostLoading : false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    addPostLoading : false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading : false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading : false,\r\n    removePostDone: false,\r\n    removePostError: null\r\n\r\n}\r\n\r\nexport const generateDummyPost = (number) =>\r\nArray(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    content: faker.lorem.paragraph(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    Images: [{\r\n        src: faker.image.image()\r\n    }],\r\n    Comments:[{\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n    }]\r\n    \r\n}))\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User:{\r\n        id:1,\r\n        nickname:'사용자2'\r\n    },\r\n    Images: [{src:\"https://cdn.pixabay.com/photo/2021/01/24/20/47/mountains-5946500_1280.jpg\"},],\r\n    Comments: ['댓글테스트'],\r\n})\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    ...data,\r\n})\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\nexport const addPostSuccessAction = (data) => ({\r\n    type: ADD_POST_SUCCESS,\r\n    data\r\n})\r\nexport const addPostFailureAction = (data) => ({\r\n    type: ADD_POST_FAILURE,\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\n\r\n\r\n\r\nconst reducer = (state =  initialState, action) =>{\r\n    return produce(state,(draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = action.err;\r\n                break;\r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone = false;\r\n                draft.loadPostError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.err;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data))\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.err;\r\n                break;\r\n\r\n                case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.err;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    })\r\n}\r\n\r\nexport default reducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}