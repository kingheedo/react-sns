{"ast":null,"code":"import { all, fork, put, takeLatest, delay, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport shortId from 'shortid';\nimport { REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostApi() {\n  return axios.get('api/loadPost', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostApi() {\n  return axios.get('api/addpost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentApi() {\n  return axios.get('api/addcomment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/gmleh/Desktop/react-nodebird-self/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","shortId","REMOVE_POST_OF_ME","loadPostApi","get","data","loadPost","action","type","err","response","addPostApi","addPost","id","generate","content","removePostApi","removePost","addCommentApi","addComment","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, put, takeLatest, delay, throttle } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\r\nimport shortId from 'shortid'\r\nimport { REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n\r\nfunction loadPostApi() {\r\n    return axios.get('api/loadPost',data)\r\n}\r\nfunction* loadPost (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10)\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:LOAD_POSTS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction addPostApi() {\r\n    return axios.get('api/addpost',data)\r\n}\r\nfunction* addPost (action){\r\n    try{\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data:{\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* removePost (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:REMOVE_POST_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction addCommentApi() {\r\n    return axios.get('api/addcomment',data)\r\n}\r\nfunction* addComment (action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n        \r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadPost() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}